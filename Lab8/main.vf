////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 09/10/2024 10:38:38
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog /home/phuwit/Programming/KMITL-DigitalSystemsFundamentals/Lab8/main.vf -w /home/phuwit/Programming/KMITL-DigitalSystemsFundamentals/Lab8/main.sch
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module ADD8_HXILINX_main (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module COMP8_HXILINX_main (EQ, A, B);
    

   output EQ;

   input  [7:0] A;
   input  [7:0] B;

   assign EQ = (A==B) ;

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_main (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_main(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 100 ps / 10 ps

module CB4RE_HXILINX_main(CEO, Q0, Q1, Q2, Q3, TC, C, CE, R);
   
   localparam TERMINAL_COUNT = 4'b1111;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;
   
   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C)
     begin
	if (R)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;
	else if (CE)
	  {Q3,Q2,Q1,Q0} <= {Q3,Q2,Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q3,Q2,Q1,Q0} == TERMINAL_COUNT); 
   
endmodule
`timescale 1ns / 1ps

module Counter0_9_MUSER_main(CE, 
                             Clock, 
                             Count, 
                             TC);

    input CE;
    input Clock;
   output [3:0] Count;
   output TC;
   
   wire XLXN_26;
   wire [3:0] Count_DUMMY;
   
   assign Count[3:0] = Count_DUMMY[3:0];
   (* HU_SET = "XLXI_27_0" *) 
   CB4RE_HXILINX_main  XLXI_27 (.C(Clock), 
                               .CE(CE), 
                               .R(XLXN_26), 
                               .CEO(), 
                               .Q0(Count_DUMMY[0]), 
                               .Q1(Count_DUMMY[1]), 
                               .Q2(Count_DUMMY[2]), 
                               .Q3(Count_DUMMY[3]), 
                               .TC());
   AND4B2  XLXI_28 (.I0(Count_DUMMY[0]), 
                   .I1(Count_DUMMY[2]), 
                   .I2(Count_DUMMY[1]), 
                   .I3(Count_DUMMY[3]), 
                   .O(XLXN_26));
   BUF  XLXI_29 (.I(XLXN_26), 
                .O(TC));
endmodule
`timescale 1ns / 1ps

module Counter0_2_MUSER_main(CLK, 
                             A, 
                             B);

    input CLK;
   output A;
   output B;
   
   wire XLXN_2;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_12;
   
   (* HU_SET = "XLXI_2_1" *) 
   FJKC_HXILINX_main  XLXI_2 (.C(CLK), 
                             .CLR(XLXN_12), 
                             .J(XLXN_8), 
                             .K(XLXN_2), 
                             .Q(XLXN_7));
   (* HU_SET = "XLXI_3_2" *) 
   FJKC_HXILINX_main  XLXI_3 (.C(CLK), 
                             .CLR(XLXN_12), 
                             .J(XLXN_5), 
                             .K(XLXN_4), 
                             .Q(XLXN_8));
   VCC  XLXI_7 (.P(XLXN_4));
   VCC  XLXI_8 (.P(XLXN_2));
   INV  XLXI_9 (.I(XLXN_7), 
               .O(XLXN_5));
   BUF  XLXI_10 (.I(XLXN_7), 
                .O(B));
   BUF  XLXI_11 (.I(XLXN_8), 
                .O(A));
   GND  XLXI_12 (.G(XLXN_12));
endmodule
`timescale 1ns / 1ps

module Mux4_Bus4_1E_MUSER_main(D0, 
                               D1, 
                               D2, 
                               D3, 
                               E, 
                               S0, 
                               S1, 
                               O);

    input [3:0] D0;
    input [3:0] D1;
    input [3:0] D2;
    input [3:0] D3;
    input E;
    input S0;
    input S1;
   output [3:0] O;
   
   
   (* HU_SET = "XLXI_13_3" *) 
   M4_1E_HXILINX_main  XLXI_13 (.D0(D0[0]), 
                               .D1(D1[0]), 
                               .D2(D2[0]), 
                               .D3(D3[0]), 
                               .E(E), 
                               .S0(S0), 
                               .S1(S1), 
                               .O(O[0]));
   (* HU_SET = "XLXI_14_4" *) 
   M4_1E_HXILINX_main  XLXI_14 (.D0(D0[1]), 
                               .D1(D1[1]), 
                               .D2(D2[1]), 
                               .D3(D3[1]), 
                               .E(E), 
                               .S0(S0), 
                               .S1(S1), 
                               .O(O[1]));
   (* HU_SET = "XLXI_15_5" *) 
   M4_1E_HXILINX_main  XLXI_15 (.D0(D0[2]), 
                               .D1(D1[2]), 
                               .D2(D2[2]), 
                               .D3(D3[2]), 
                               .E(E), 
                               .S0(S0), 
                               .S1(S1), 
                               .O(O[2]));
   (* HU_SET = "XLXI_16_6" *) 
   M4_1E_HXILINX_main  XLXI_16 (.D0(D0[3]), 
                               .D1(D1[3]), 
                               .D2(D2[3]), 
                               .D3(D3[3]), 
                               .E(E), 
                               .S0(S0), 
                               .S1(S1), 
                               .O(O[3]));
endmodule
`timescale 1ns / 1ps

module Displayer_MUSER_main(Clock, 
                            CO, 
                            NUMBER, 
                            COM, 
                            SEG);

    input Clock;
    input CO;
    input [7:0] NUMBER;
   output [3:0] COM;
   output [6:0] SEG;
   
   wire [3:0] D2;
   wire [3:0] XLXN_1;
   wire [3:0] XLXN_9;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   
   SSEG_DEC  XLXI_1 (.BCD(XLXN_1[3:0]), 
                    .SSEG(SEG[6:0]));
   Mux4_Bus4_1E_MUSER_main  XLXI_4 (.D0(NUMBER[3:0]), 
                                   .D1(NUMBER[7:4]), 
                                   .D2(D2[3:0]), 
                                   .D3(XLXN_9[3:0]), 
                                   .E(XLXN_15), 
                                   .S0(XLXN_16), 
                                   .S1(XLXN_17), 
                                   .O(XLXN_1[3:0]));
   BUF  XLXI_5 (.I(CO), 
               .O(D2[0]));
   GND  XLXI_6 (.G(D2[3]));
   GND  XLXI_7 (.G(D2[2]));
   GND  XLXI_8 (.G(D2[1]));
   GND  XLXI_9 (.G(XLXN_9[3]));
   GND  XLXI_10 (.G(XLXN_9[2]));
   GND  XLXI_11 (.G(XLXN_9[1]));
   GND  XLXI_12 (.G(XLXN_9[0]));
   VCC  XLXI_13 (.P(XLXN_15));
   Counter0_2_MUSER_main  XLXI_14 (.CLK(Clock), 
                                  .A(XLXN_16), 
                                  .B(XLXN_17));
   VCC  XLXI_21 (.P(COM[3]));
   NAND2B1  XLXI_25 (.I0(XLXN_16), 
                    .I1(XLXN_17), 
                    .O(COM[2]));
   NAND2B2  XLXI_28 (.I0(XLXN_16), 
                    .I1(XLXN_17), 
                    .O(COM[0]));
   NAND2B1  XLXI_29 (.I0(XLXN_17), 
                    .I1(XLXN_16), 
                    .O(COM[1]));
endmodule
`timescale 1ns / 1ps

module Processor_MUSER_main(A, 
                            B, 
                            CO, 
                            S);

    input [7:0] A;
    input [7:0] B;
   output CO;
   output [7:0] S;
   
   wire XLXN_1;
   
   (* HU_SET = "XLXI_1_7" *) 
   ADD8_HXILINX_main  XLXI_1 (.A(A[7:0]), 
                             .B(B[7:0]), 
                             .CI(XLXN_1), 
                             .CO(CO), 
                             .OFL(), 
                             .S(S[7:0]));
   GND  XLXI_2 (.G(XLXN_1));
endmodule
`timescale 1ns / 1ps

module main(DIP, 
            OSC, 
            SW, 
            BUZ, 
            SSD_COM, 
            SSD_SEG);

    input [7:0] DIP;
    input OSC;
    input [7:0] SW;
   output BUZ;
   output [3:0] SSD_COM;
   output [6:0] SSD_SEG;
   
   wire [7:0] LED;
   wire XLXN_4;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_14;
   wire [7:0] XLXN_16;
   wire XLXN_24;
   
   Processor_MUSER_main  XLXI_3 (.A(SW[7:0]), 
                                .B(DIP[7:0]), 
                                .CO(XLXN_4), 
                                .S(LED[7:0]));
   Displayer_MUSER_main  XLXI_5 (.Clock(XLXN_14), 
                                .CO(XLXN_4), 
                                .NUMBER(LED[7:0]), 
                                .COM(SSD_COM[3:0]), 
                                .SEG(SSD_SEG[6:0]));
   Counter0_9_MUSER_main  XLXI_6 (.CE(XLXN_8), 
                                 .Clock(OSC), 
                                 .Count(), 
                                 .TC(XLXN_6));
   Counter0_9_MUSER_main  XLXI_7 (.CE(XLXN_8), 
                                 .Clock(XLXN_6), 
                                 .Count(), 
                                 .TC(XLXN_7));
   Counter0_9_MUSER_main  XLXI_8 (.CE(XLXN_8), 
                                 .Clock(XLXN_7), 
                                 .Count(), 
                                 .TC(XLXN_14));
   VCC  XLXI_9 (.P(XLXN_8));
   (* HU_SET = "XLXI_10_8" *) 
   COMP8_HXILINX_main  XLXI_10 (.A(LED[7:0]), 
                               .B(XLXN_16[7:0]), 
                               .EQ(XLXN_24));
   GND  XLXI_11_0 (.G(XLXN_16[0]));
   GND  XLXI_11_1 (.G(XLXN_16[1]));
   GND  XLXI_11_2 (.G(XLXN_16[2]));
   GND  XLXI_11_3 (.G(XLXN_16[3]));
   GND  XLXI_11_4 (.G(XLXN_16[4]));
   GND  XLXI_11_5 (.G(XLXN_16[5]));
   GND  XLXI_11_6 (.G(XLXN_16[6]));
   GND  XLXI_11_7 (.G(XLXN_16[7]));
   AND2B1  XLXI_14 (.I0(XLXN_4), 
                   .I1(XLXN_24), 
                   .O(BUZ));
endmodule
