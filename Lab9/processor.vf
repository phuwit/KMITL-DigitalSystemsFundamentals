////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : processor.vf
// /___/   /\     Timestamp : 09/17/2024 15:54:01
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog /home/phuwit/Programming/KMITL-DigitalSystemsFundamentals/Lab9/processor.vf -w /home/phuwit/Programming/KMITL-DigitalSystemsFundamentals/Lab9/processor.sch
//Design Name: processor
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module ADD8_HXILINX_processor (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module ADSU8_HXILINX_processor (CO, OFL, S, A, ADD, B, CI);

   
   output             CO;
   output             OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  	      ADD;
   input  [7:0]       B;
   input              CI;

   reg    [8:0]       adsu_tmp;  

   always @ (A, ADD, B, CI) 
   begin
      if(ADD)
         adsu_tmp = A + B + CI;
      else
         adsu_tmp = A - (!CI) - B;
   end

   assign S   =  adsu_tmp[7:0];
   assign CO  =  ADD ? adsu_tmp[8] : ~adsu_tmp[8];
   assign OFL =  ADD ? ( (A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]) ) : ( (A[7] & (~B[7]) & (~S[7])) | ((~A[7]) & B[7] & S[7]) );

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_processor(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module xor8_sep_MUSER_processor(A, 
                                B, 
                                O);

    input [7:0] A;
    input [7:0] B;
   output [7:0] O;
   
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   
   btw8  XLXI_1 (.I(A[7:0]), 
                .O0(XLXN_12), 
                .O1(XLXN_14), 
                .O2(XLXN_16), 
                .O3(XLXN_18), 
                .O4(XLXN_20), 
                .O5(XLXN_22), 
                .O6(XLXN_24), 
                .O7(XLXN_27));
   btw8  XLXI_2 (.I(B[7:0]), 
                .O0(XLXN_13), 
                .O1(XLXN_15), 
                .O2(XLXN_17), 
                .O3(XLXN_19), 
                .O4(XLXN_21), 
                .O5(XLXN_23), 
                .O6(XLXN_25), 
                .O7(XLXN_26));
   wtb8  XLXI_3 (.I0(XLXN_3), 
                .I1(XLXN_4), 
                .I2(XLXN_5), 
                .I3(XLXN_6), 
                .I4(XLXN_7), 
                .I5(XLXN_8), 
                .I6(XLXN_9), 
                .I7(XLXN_10), 
                .O(O[7:0]));
   XOR2  XLXI_4 (.I0(XLXN_13), 
                .I1(XLXN_12), 
                .O(XLXN_3));
   XOR2  XLXI_5 (.I0(XLXN_15), 
                .I1(XLXN_14), 
                .O(XLXN_4));
   XOR2  XLXI_6 (.I0(XLXN_17), 
                .I1(XLXN_16), 
                .O(XLXN_5));
   XOR2  XLXI_24 (.I0(XLXN_19), 
                 .I1(XLXN_18), 
                 .O(XLXN_6));
   XOR2  XLXI_25 (.I0(XLXN_23), 
                 .I1(XLXN_22), 
                 .O(XLXN_8));
   XOR2  XLXI_26 (.I0(XLXN_21), 
                 .I1(XLXN_20), 
                 .O(XLXN_7));
   XOR2  XLXI_27 (.I0(XLXN_25), 
                 .I1(XLXN_24), 
                 .O(XLXN_9));
   XOR2  XLXI_29 (.I0(XLXN_26), 
                 .I1(XLXN_27), 
                 .O(XLXN_10));
endmodule
`timescale 1ns / 1ps

module shl8_MUSER_processor(D, 
                            O);

    input [7:0] D;
   output [7:0] O;
   
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   
   btw8  XLXI_2 (.I(D[7:0]), 
                .O0(XLXN_11), 
                .O1(XLXN_12), 
                .O2(XLXN_13), 
                .O3(XLXN_14), 
                .O4(XLXN_15), 
                .O5(XLXN_16), 
                .O6(XLXN_17), 
                .O7());
   wtb8  XLXI_3 (.I0(XLXN_18), 
                .I1(XLXN_11), 
                .I2(XLXN_12), 
                .I3(XLXN_13), 
                .I4(XLXN_14), 
                .I5(XLXN_15), 
                .I6(XLXN_16), 
                .I7(XLXN_17), 
                .O(O[7:0]));
   GND  XLXI_4 (.G(XLXN_18));
endmodule
`timescale 1ns / 1ps

module processor(A, 
                 B, 
                 MODETOGGLE, 
                 OH0, 
                 OH1, 
                 S);

    input [7:0] A;
    input [7:0] B;
    input MODETOGGLE;
   output [3:0] OH0;
   output [3:0] OH1;
   output [1:0] S;
   
   wire XLXN_2;
   wire XLXN_7;
   wire XLXN_18;
   wire [7:0] XLXN_30;
   wire [7:0] XLXN_50;
   wire [7:0] XLXN_51;
   wire [7:0] XLXN_52;
   wire XLXN_54;
   wire XLXN_63;
   wire XLXN_64;
   wire [1:0] S_DUMMY;
   
   assign S[1:0] = S_DUMMY[1:0];
   (* HU_SET = "XLXI_1_14" *) 
   CB2CE_HXILINX_processor  XLXI_1 (.C(MODETOGGLE), 
                                   .CE(XLXN_2), 
                                   .CLR(XLXN_7), 
                                   .CEO(), 
                                   .Q0(S_DUMMY[0]), 
                                   .Q1(S_DUMMY[1]), 
                                   .TC());
   VCC  XLXI_2 (.P(XLXN_2));
   GND  XLXI_7 (.G(XLXN_7));
   Mux4_Bus4_1E  XLXI_9 (.D0(XLXN_30[3:0]), 
                        .D1(XLXN_50[3:0]), 
                        .D2(XLXN_51[3:0]), 
                        .D3(XLXN_52[3:0]), 
                        .E(XLXN_18), 
                        .S0(S_DUMMY[0]), 
                        .S1(S_DUMMY[1]), 
                        .O(OH0[3:0]));
   VCC  XLXI_17 (.P(XLXN_18));
   (* HU_SET = "XLXI_23_15" *) 
   ADD8_HXILINX_processor  XLXI_23 (.A(A[7:0]), 
                                   .B(B[7:0]), 
                                   .CI(), 
                                   .CO(), 
                                   .OFL(), 
                                   .S(XLXN_30[7:0]));
   shl8_MUSER_processor  XLXI_25 (.D(A[7:0]), 
                                 .O(XLXN_52[7:0]));
   xor8_sep_MUSER_processor  XLXI_27 (.A(A[7:0]), 
                                     .B(B[7:0]), 
                                     .O(XLXN_51[7:0]));
   Mux4_Bus4_1E  XLXI_28 (.D0(XLXN_30[7:4]), 
                         .D1(XLXN_50[7:4]), 
                         .D2(XLXN_51[7:4]), 
                         .D3(XLXN_52[7:4]), 
                         .E(XLXN_54), 
                         .S0(S_DUMMY[0]), 
                         .S1(S_DUMMY[1]), 
                         .O(OH1[3:0]));
   VCC  XLXI_29 (.P(XLXN_54));
   (* HU_SET = "XLXI_30_16" *) 
   ADSU8_HXILINX_processor  XLXI_30 (.A(A[7:0]), 
                                    .ADD(XLXN_63), 
                                    .B(B[7:0]), 
                                    .CI(XLXN_64), 
                                    .CO(), 
                                    .OFL(), 
                                    .S(XLXN_50[7:0]));
   GND  XLXI_31 (.G(XLXN_63));
   VCC  XLXI_32 (.P(XLXN_64));
endmodule
