////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main.vf
// /___/   /\     Timestamp : 09/17/2024 15:54:01
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog /home/phuwit/Programming/KMITL-DigitalSystemsFundamentals/Lab9/main.vf -w /home/phuwit/Programming/KMITL-DigitalSystemsFundamentals/Lab9/main.sch
//Design Name: main
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module ADD8_HXILINX_main (CO, OFL, S, A, B, CI);


   output 	      CO;
   output 	      OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  [7:0]       B;
   input              CI;

   assign   {CO, S} = A + B + CI;
   assign   OFL     = ( A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]);

endmodule
`timescale  100 ps / 10 ps

module ADSU8_HXILINX_main (CO, OFL, S, A, ADD, B, CI);

   
   output             CO;
   output             OFL;
   output [7:0]       S;

   input  [7:0]       A;
   input  	      ADD;
   input  [7:0]       B;
   input              CI;

   reg    [8:0]       adsu_tmp;  

   always @ (A, ADD, B, CI) 
   begin
      if(ADD)
         adsu_tmp = A + B + CI;
      else
         adsu_tmp = A - (!CI) - B;
   end

   assign S   =  adsu_tmp[7:0];
   assign CO  =  ADD ? adsu_tmp[8] : ~adsu_tmp[8];
   assign OFL =  ADD ? ( (A[7] & B[7] & (~S[7])) | ((~A[7]) & (~B[7]) & S[7]) ) : ( (A[7] & (~B[7]) & (~S[7])) | ((~A[7]) & B[7] & S[7]) );

endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_main(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_main (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_main(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module ClockDiv1K_MUSER_main(CLK, 
                             CLK_O);

    input CLK;
   output CLK_O;
   
   wire CLKOWO;
   wire XLXN_18;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_123;
   wire XLXN_128;
   wire XLXN_129;
   wire XLXN_130;
   wire XLXN_131;
   wire XLXN_133;
   wire XLXN_134;
   wire XLXN_135;
   wire XLXN_136;
   wire XLXN_137;
   wire XLXN_138;
   wire XLXN_139;
   wire XLXN_140;
   wire XLXN_145;
   wire XLXN_146;
   wire XLXN_147;
   wire XLXN_148;
   wire XLXN_150;
   wire XLXN_151;
   wire XLXN_152;
   wire XLXN_153;
   wire XLXN_154;
   wire XLXN_155;
   wire XLXN_156;
   wire CLK_O_DUMMY;
   
   assign CLK_O = CLK_O_DUMMY;
   (* HU_SET = "XLXI_1_17" *) 
   FJKC_HXILINX_main  XLXI_1 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_35), 
                             .K(XLXN_36), 
                             .Q(XLXN_30));
   (* HU_SET = "XLXI_2_18" *) 
   FJKC_HXILINX_main  XLXI_2 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_30), 
                             .K(XLXN_34), 
                             .Q(XLXN_33));
   (* HU_SET = "XLXI_3_19" *) 
   FJKC_HXILINX_main  XLXI_3 (.C(CLK), 
                             .CLR(XLXN_18), 
                             .J(XLXN_29), 
                             .K(XLXN_28), 
                             .Q(XLXN_34));
   GND  XLXI_15 (.G(XLXN_18));
   VCC  XLXI_20 (.P(XLXN_28));
   INV  XLXI_21 (.I(XLXN_30), 
                .O(XLXN_29));
   AND2B1  XLXI_22 (.I0(XLXN_33), 
                   .I1(XLXN_34), 
                   .O(XLXN_35));
   VCC  XLXI_23 (.P(XLXN_36));
   FD_1 #( .INIT(1'b0) ) XLXI_24 (.C(CLK), 
                 .D(XLXN_33), 
                 .Q(XLXN_38));
   OR2  XLXI_25 (.I0(XLXN_38), 
                .I1(XLXN_33), 
                .O(XLXN_123));
   FD_1 #( .INIT(1'b0) ) XLXI_26 (.C(XLXN_123), 
                 .D(XLXN_39), 
                 .Q(CLKOWO));
   INV  XLXI_27 (.I(CLKOWO), 
                .O(XLXN_39));
   (* HU_SET = "XLXI_28_20" *) 
   FJKC_HXILINX_main  XLXI_28 (.C(CLKOWO), 
                              .CLR(XLXN_128), 
                              .J(XLXN_135), 
                              .K(XLXN_136), 
                              .Q(XLXN_131));
   (* HU_SET = "XLXI_29_21" *) 
   FJKC_HXILINX_main  XLXI_29 (.C(CLKOWO), 
                              .CLR(XLXN_128), 
                              .J(XLXN_131), 
                              .K(XLXN_134), 
                              .Q(XLXN_133));
   (* HU_SET = "XLXI_30_22" *) 
   FJKC_HXILINX_main  XLXI_30 (.C(CLKOWO), 
                              .CLR(XLXN_128), 
                              .J(XLXN_130), 
                              .K(XLXN_129), 
                              .Q(XLXN_134));
   GND  XLXI_31 (.G(XLXN_128));
   VCC  XLXI_32 (.P(XLXN_129));
   INV  XLXI_33 (.I(XLXN_131), 
                .O(XLXN_130));
   AND2B1  XLXI_34 (.I0(XLXN_133), 
                   .I1(XLXN_134), 
                   .O(XLXN_135));
   VCC  XLXI_35 (.P(XLXN_136));
   FD_1 #( .INIT(1'b0) ) XLXI_36 (.C(CLKOWO), 
                 .D(XLXN_133), 
                 .Q(XLXN_138));
   OR2  XLXI_37 (.I0(XLXN_138), 
                .I1(XLXN_133), 
                .O(XLXN_137));
   FD_1 #( .INIT(1'b0) ) XLXI_38 (.C(XLXN_137), 
                 .D(XLXN_139), 
                 .Q(XLXN_140));
   INV  XLXI_39 (.I(XLXN_140), 
                .O(XLXN_139));
   (* HU_SET = "XLXI_40_23" *) 
   FJKC_HXILINX_main  XLXI_40 (.C(XLXN_140), 
                              .CLR(XLXN_145), 
                              .J(XLXN_152), 
                              .K(XLXN_153), 
                              .Q(XLXN_148));
   (* HU_SET = "XLXI_41_24" *) 
   FJKC_HXILINX_main  XLXI_41 (.C(XLXN_140), 
                              .CLR(XLXN_145), 
                              .J(XLXN_148), 
                              .K(XLXN_151), 
                              .Q(XLXN_150));
   (* HU_SET = "XLXI_42_25" *) 
   FJKC_HXILINX_main  XLXI_42 (.C(XLXN_140), 
                              .CLR(XLXN_145), 
                              .J(XLXN_147), 
                              .K(XLXN_146), 
                              .Q(XLXN_151));
   GND  XLXI_43 (.G(XLXN_145));
   VCC  XLXI_44 (.P(XLXN_146));
   INV  XLXI_45 (.I(XLXN_148), 
                .O(XLXN_147));
   AND2B1  XLXI_46 (.I0(XLXN_150), 
                   .I1(XLXN_151), 
                   .O(XLXN_152));
   VCC  XLXI_47 (.P(XLXN_153));
   FD_1 #( .INIT(1'b0) ) XLXI_48 (.C(XLXN_140), 
                 .D(XLXN_150), 
                 .Q(XLXN_155));
   OR2  XLXI_49 (.I0(XLXN_155), 
                .I1(XLXN_150), 
                .O(XLXN_154));
   FD_1 #( .INIT(1'b0) ) XLXI_50 (.C(XLXN_154), 
                 .D(XLXN_156), 
                 .Q(CLK_O_DUMMY));
   INV  XLXI_51 (.I(CLK_O_DUMMY), 
                .O(XLXN_156));
endmodule
`timescale 1ns / 1ps

module xor8_sep_MUSER_main(A, 
                           B, 
                           O);

    input [7:0] A;
    input [7:0] B;
   output [7:0] O;
   
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   
   btw8  XLXI_1 (.I(A[7:0]), 
                .O0(XLXN_12), 
                .O1(XLXN_14), 
                .O2(XLXN_16), 
                .O3(XLXN_18), 
                .O4(XLXN_20), 
                .O5(XLXN_22), 
                .O6(XLXN_24), 
                .O7(XLXN_27));
   btw8  XLXI_2 (.I(B[7:0]), 
                .O0(XLXN_13), 
                .O1(XLXN_15), 
                .O2(XLXN_17), 
                .O3(XLXN_19), 
                .O4(XLXN_21), 
                .O5(XLXN_23), 
                .O6(XLXN_25), 
                .O7(XLXN_26));
   wtb8  XLXI_3 (.I0(XLXN_3), 
                .I1(XLXN_4), 
                .I2(XLXN_5), 
                .I3(XLXN_6), 
                .I4(XLXN_7), 
                .I5(XLXN_8), 
                .I6(XLXN_9), 
                .I7(XLXN_10), 
                .O(O[7:0]));
   XOR2  XLXI_4 (.I0(XLXN_13), 
                .I1(XLXN_12), 
                .O(XLXN_3));
   XOR2  XLXI_5 (.I0(XLXN_15), 
                .I1(XLXN_14), 
                .O(XLXN_4));
   XOR2  XLXI_6 (.I0(XLXN_17), 
                .I1(XLXN_16), 
                .O(XLXN_5));
   XOR2  XLXI_24 (.I0(XLXN_19), 
                 .I1(XLXN_18), 
                 .O(XLXN_6));
   XOR2  XLXI_25 (.I0(XLXN_23), 
                 .I1(XLXN_22), 
                 .O(XLXN_8));
   XOR2  XLXI_26 (.I0(XLXN_21), 
                 .I1(XLXN_20), 
                 .O(XLXN_7));
   XOR2  XLXI_27 (.I0(XLXN_25), 
                 .I1(XLXN_24), 
                 .O(XLXN_9));
   XOR2  XLXI_29 (.I0(XLXN_26), 
                 .I1(XLXN_27), 
                 .O(XLXN_10));
endmodule
`timescale 1ns / 1ps

module shl8_MUSER_main(D, 
                       O);

    input [7:0] D;
   output [7:0] O;
   
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   
   btw8  XLXI_2 (.I(D[7:0]), 
                .O0(XLXN_11), 
                .O1(XLXN_12), 
                .O2(XLXN_13), 
                .O3(XLXN_14), 
                .O4(XLXN_15), 
                .O5(XLXN_16), 
                .O6(XLXN_17), 
                .O7());
   wtb8  XLXI_3 (.I0(XLXN_18), 
                .I1(XLXN_11), 
                .I2(XLXN_12), 
                .I3(XLXN_13), 
                .I4(XLXN_14), 
                .I5(XLXN_15), 
                .I6(XLXN_16), 
                .I7(XLXN_17), 
                .O(O[7:0]));
   GND  XLXI_4 (.G(XLXN_18));
endmodule
`timescale 1ns / 1ps

module processor_MUSER_main(A, 
                            B, 
                            MODETOGGLE, 
                            OH0, 
                            OH1, 
                            S);

    input [7:0] A;
    input [7:0] B;
    input MODETOGGLE;
   output [3:0] OH0;
   output [3:0] OH1;
   output [1:0] S;
   
   wire XLXN_2;
   wire XLXN_7;
   wire XLXN_18;
   wire [7:0] XLXN_30;
   wire [7:0] XLXN_50;
   wire [7:0] XLXN_51;
   wire [7:0] XLXN_52;
   wire XLXN_54;
   wire XLXN_63;
   wire XLXN_64;
   wire [1:0] S_DUMMY;
   
   assign S[1:0] = S_DUMMY[1:0];
   (* HU_SET = "XLXI_1_26" *) 
   CB2CE_HXILINX_main  XLXI_1 (.C(MODETOGGLE), 
                              .CE(XLXN_2), 
                              .CLR(XLXN_7), 
                              .CEO(), 
                              .Q0(S_DUMMY[0]), 
                              .Q1(S_DUMMY[1]), 
                              .TC());
   VCC  XLXI_2 (.P(XLXN_2));
   GND  XLXI_7 (.G(XLXN_7));
   Mux4_Bus4_1E  XLXI_9 (.D0(XLXN_30[3:0]), 
                        .D1(XLXN_50[3:0]), 
                        .D2(XLXN_51[3:0]), 
                        .D3(XLXN_52[3:0]), 
                        .E(XLXN_18), 
                        .S0(S_DUMMY[0]), 
                        .S1(S_DUMMY[1]), 
                        .O(OH0[3:0]));
   VCC  XLXI_17 (.P(XLXN_18));
   (* HU_SET = "XLXI_23_27" *) 
   ADD8_HXILINX_main  XLXI_23 (.A(A[7:0]), 
                              .B(B[7:0]), 
                              .CI(), 
                              .CO(), 
                              .OFL(), 
                              .S(XLXN_30[7:0]));
   shl8_MUSER_main  XLXI_25 (.D(A[7:0]), 
                            .O(XLXN_52[7:0]));
   xor8_sep_MUSER_main  XLXI_27 (.A(A[7:0]), 
                                .B(B[7:0]), 
                                .O(XLXN_51[7:0]));
   Mux4_Bus4_1E  XLXI_28 (.D0(XLXN_30[7:4]), 
                         .D1(XLXN_50[7:4]), 
                         .D2(XLXN_51[7:4]), 
                         .D3(XLXN_52[7:4]), 
                         .E(XLXN_54), 
                         .S0(S_DUMMY[0]), 
                         .S1(S_DUMMY[1]), 
                         .O(OH1[3:0]));
   VCC  XLXI_29 (.P(XLXN_54));
   (* HU_SET = "XLXI_30_28" *) 
   ADSU8_HXILINX_main  XLXI_30 (.A(A[7:0]), 
                               .ADD(XLXN_63), 
                               .B(B[7:0]), 
                               .CI(XLXN_64), 
                               .CO(), 
                               .OFL(), 
                               .S(XLXN_50[7:0]));
   GND  XLXI_31 (.G(XLXN_63));
   VCC  XLXI_32 (.P(XLXN_64));
endmodule
`timescale 1ns / 1ps

module displayer_MUSER_main(HD0, 
                            HD1, 
                            SCAN_CLK, 
                            COM, 
                            SEG);

    input [3:0] HD0;
    input [3:0] HD1;
    input SCAN_CLK;
   output [3:0] COM;
   output [6:0] SEG;
   
   wire [3:0] XLXN_1;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire [3:0] XLXN_7;
   wire [3:0] XLXN_8;
   wire XLXN_9;
   wire XLXN_11;
   
   SSEG_DEC  XLXI_1 (.BCD(XLXN_1[3:0]), 
                    .SSEG(SEG[6:0]));
   Mux4_Bus4_1E  XLXI_2 (.D0(HD0[3:0]), 
                        .D1(HD1[3:0]), 
                        .D2(XLXN_8[3:0]), 
                        .D3(XLXN_7[3:0]), 
                        .E(XLXN_6), 
                        .S0(XLXN_5), 
                        .S1(XLXN_4), 
                        .O(XLXN_1[3:0]));
   GND  XLXI_3 (.G(XLXN_4));
   (* HU_SET = "XLXI_4_29" *) 
   FJKC_HXILINX_main  XLXI_4 (.C(SCAN_CLK), 
                             .CLR(XLXN_11), 
                             .J(XLXN_9), 
                             .K(XLXN_9), 
                             .Q(XLXN_5));
   VCC  XLXI_5 (.P(XLXN_6));
   GND  XLXI_6_0 (.G(XLXN_7[0]));
   GND  XLXI_6_1 (.G(XLXN_7[1]));
   GND  XLXI_6_2 (.G(XLXN_7[2]));
   GND  XLXI_6_3 (.G(XLXN_7[3]));
   GND  XLXI_7_0 (.G(XLXN_8[0]));
   GND  XLXI_7_1 (.G(XLXN_8[1]));
   GND  XLXI_7_2 (.G(XLXN_8[2]));
   GND  XLXI_7_3 (.G(XLXN_8[3]));
   VCC  XLXI_8 (.P(XLXN_9));
   GND  XLXI_9 (.G(XLXN_11));
   VCC  XLXI_10_2 (.P(COM[2]));
   VCC  XLXI_10_3 (.P(COM[3]));
   BUF  XLXI_11 (.I(XLXN_5), 
                .O(COM[0]));
   INV  XLXI_12 (.I(XLXN_5), 
                .O(COM[1]));
endmodule
`timescale 1ns / 1ps

module main(BTN1, 
            DIP, 
            OSC, 
            SW, 
            LED, 
            SSD_COM, 
            SSD_SEG);

    input BTN1;
    input [7:0] DIP;
    input OSC;
    input [7:0] SW;
   output [3:0] LED;
   output [3:0] SSD_COM;
   output [6:0] SSD_SEG;
   
   wire [1:0] S;
   wire [3:0] XLXN_1;
   wire XLXN_3;
   wire [3:0] XLXN_4;
   wire XLXN_20;
   
   displayer_MUSER_main  XLXI_1 (.HD0(XLXN_1[3:0]), 
                                .HD1(XLXN_4[3:0]), 
                                .SCAN_CLK(XLXN_3), 
                                .COM(SSD_COM[3:0]), 
                                .SEG(SSD_SEG[6:0]));
   processor_MUSER_main  XLXI_2 (.A(SW[7:0]), 
                                .B(DIP[7:0]), 
                                .MODETOGGLE(BTN1), 
                                .OH0(XLXN_1[3:0]), 
                                .OH1(XLXN_4[3:0]), 
                                .S(S[1:0]));
   ClockDiv1K_MUSER_main  XLXI_3 (.CLK(OSC), 
                                 .CLK_O(XLXN_3));
   (* HU_SET = "XLXI_4_30" *) 
   D2_4E_HXILINX_main  XLXI_4 (.A0(S[0]), 
                              .A1(S[1]), 
                              .E(XLXN_20), 
                              .D0(LED[0]), 
                              .D1(LED[1]), 
                              .D2(LED[2]), 
                              .D3(LED[3]));
   VCC  XLXI_9 (.P(XLXN_20));
endmodule
